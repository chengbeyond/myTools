#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Jul 01, 2024 03:33:21 PM CST  platform: Windows NT

import sys
import requests
import threading
import json
import pyperclip
from tkinter import messagebox
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import fanyi_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    root.resizable(False, False)
    root.update()
    screenwidth = root.winfo_screenwidth()
    screenheight = root.winfo_screenheight()
    width = 1168
    height = 620
    size = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    root.geometry(size)

    top = Toplevel1(root)
    fanyi_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    fanyi_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.title("deepl翻译")
        top.configure(background="#d9d9d9")

        self.zhBtn = tk.Button(top)
        self.zhBtn.place(relx=0.497, rely=0.435, height=28, width=79)
        self.zhBtn.configure(activebackground="#ececec")
        self.zhBtn.configure(activeforeground="#000000")
        self.zhBtn.configure(background="#d9d9d9")
        self.zhBtn.configure(command=self.zh_translate)
        self.zhBtn.configure(disabledforeground="#a3a3a3")
        self.zhBtn.configure(foreground="#000000")
        self.zhBtn.configure(highlightbackground="#d9d9d9")
        self.zhBtn.configure(highlightcolor="black")
        self.zhBtn.configure(pady="0")
        self.zhBtn.configure(text='''翻译成中文''')
        self.zhBtn.configure(width=59)

        self.enBtn = tk.Button(top)
        self.enBtn.place(relx=0.407, rely=0.435, height=28, width=79)
        self.enBtn.configure(activebackground="#ececec")
        self.enBtn.configure(activeforeground="#000000")
        self.enBtn.configure(background="#d9d9d9")
        self.enBtn.configure(command=self.en_translate)
        self.enBtn.configure(disabledforeground="#a3a3a3")
        self.enBtn.configure(foreground="#000000")
        self.enBtn.configure(highlightbackground="#d9d9d9")
        self.enBtn.configure(highlightcolor="black")
        self.enBtn.configure(pady="0")
        self.enBtn.configure(text='''翻译成英文''')
        self.enBtn.configure(width=69)

        self.clearBtn = tk.Button(top)
        self.clearBtn.place(relx=0.585, rely=0.435, height=28, width=79)
        self.clearBtn.configure(activebackground="#ececec")
        self.clearBtn.configure(activeforeground="#000000")
        self.clearBtn.configure(background="#d9d9d9")
        self.clearBtn.configure(command=self.emptyText)
        self.clearBtn.configure(disabledforeground="#a3a3a3")
        self.clearBtn.configure(foreground="#000000")
        self.clearBtn.configure(highlightbackground="#d9d9d9")
        self.clearBtn.configure(highlightcolor="black")
        self.clearBtn.configure(pady="0")
        self.clearBtn.configure(text='''清空''')
        self.clearBtn.configure(width=69)


        self.original_text = tk.Text(top)
        self.original_text.place(relx=0.009, rely=0.016, relheight=0.408
                                 , relwidth=0.981)
        self.original_text.configure(width=1146)
        self.original_text.configure(takefocus="")
        self.original_text.configure(cursor="ibeam")

        self.now_text = tk.Text(top)
        self.now_text.place(relx=0.017, rely=0.5, relheight=0.473
                            , relwidth=0.973)
        self.now_text.configure(width=1136)
        self.now_text.configure(takefocus="")
        self.now_text.configure(cursor="ibeam")

    def emptyText(self):
        self.original_text.delete(1.0, tk.END)  # 清空now_text
        self.now_text.delete(1.0, tk.END)  # 清空now_text
        pyperclip.copy('')

    def en_translate(self):
        t1 = threading.Thread(target=self.do_en_translation)
        # (self, "EN")
        t1.start()

    def zh_translate(self):
        t2 = threading.Thread(target=self.do_zh_translation)
        # (self, "ZH")
        t2.start()

    def do_en_translation(self):
        """执行翻译操作并更新now_text"""
        original_text_content = self.original_text.get(1.0, tk.END)
        translated_text = self.translate_text(original_text_content, "EN")
        self.now_text.delete(1.0, tk.END)  # 清空now_text
        self.now_text.insert(tk.END, translated_text)  # 插入翻译文本
        pyperclip.copy(translated_text)  # 复制翻译结果到剪贴板
        # 显示消息框告知用户内容已复制
        messagebox.showinfo("复制成功", "翻译的内容已复制到剪贴板！")

    def do_zh_translation(self):
        """执行翻译操作并更新now_text"""
        original_text_content = self.original_text.get(1.0, tk.END)
        translated_text = self.translate_text(original_text_content, "ZH")
        self.now_text.delete(1.0, tk.END)  # 清空now_text
        self.now_text.insert(tk.END, translated_text)  # 插入翻译文本
        pyperclip.copy(translated_text)  # 复制翻译结果到剪贴板
        # 显示消息框告知用户内容已复制
        messagebox.showinfo("复制成功", "翻译的内容已复制到剪贴板！")

    def translate_text(self, source_text, target_lang):
        """通用翻译函数"""
        payload = json.dumps({
            "text": source_text,
            "source_lang": "auto",
            "target_lang": target_lang
        })
        headers = {
            'Content-Type': 'application/json'
        }
        try:
            response = requests.post(url, headers=headers,
                                     data=payload,verify=False)  # 请替换为有效的翻译API URL
            data = response.json()
            print(data)
            translated_text = data.get("translated_text", data)
            return translated_text["data"]
        except requests.RequestException as e:
            return f"请求错误: {e}"


if __name__ == '__main__':
    # https://linux.do/t/topic/111737
    url = 'https://api.deeplx.org/2G9KXFuolVgvhaSTPPPpdMdDYS8M_Fm3tBVYOmdozSE/translate'
    # url = "https://deeplx.niubipro.com/translate"
    # url = "http://localhost:1188/translate"
    vp_start_gui()
